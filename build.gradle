plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.10.1'
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "2.8"
}

sonarqube {
    properties {
        property "sonar.projectKey", "kdebisschop_rundeck-file-lookup-plugins"
        property "sonar.organization", "kdebisschop"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", "807fd8589d7244bd324b5fecdfca9614d8a40c8c"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

sourceCompatibility = 1.8
defaultTasks 'clean','build'
ext.rundeckPluginVersion = '1.2'
ext.pluginClassNames='com.bioraft.rundeck.filelookup.JsonFindValueStepPlugin,' +
'com.bioraft.rundeck.filelookup.ScanFileStepPlugin,' +
'com.bioraft.rundeck.filelookup.JsonFindValueNodeStepPlugin,' +
'com.bioraft.rundeck.filelookup.ScanFileNodeStepPlugin'
ext.pluginName = 'RunDeck File Lookup Plugin'
ext.pluginDescription = 'Find step values within files'

scmVersion {
    ignoreUncommittedChanges = true
    tag {
        // If tags begin with <prefix><versionSeparator> ignore them.
        // Include all tags if prefix is empty.
        prefix = ''
        versionSeparator = ''

        // Append .0 to satisfy SemVer if the tag version is only X.Y
        def origDeserialize=deserialize
        deserialize = { config, position, tagName ->
            String orig = origDeserialize(config, position, tagName)
            if (orig.split('\\.').length < 3) {
                orig += ".0"
            }
            orig
        }
    }
}
project.version = scmVersion.version

repositories {
    mavenLocal()
    mavenCentral()
}

configurations{
    //declare custom pluginLibs configuration to include only libs for this plugin
    pluginLibs

    //declare compile to extend from pluginLibs so it inherits the dependencies
    compile{
        extendsFrom pluginLibs
    }
}

dependencies {
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.1'

    implementation 'org.rundeck:rundeck-core:3.0.+'
	
    testImplementation group: 'junit', name: 'junit', version:'4.12'

    testImplementation 'org.mockito:mockito-core:3.+'
}

plugins.withType(JacocoPlugin) {
    tasks["test"].finalizedBy 'jacocoTestReport'
}

// task to copy plugin libs to output/lib dir
task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.pluginLibs
}

jar {
    from "$buildDir/output"
    manifest {
        def libList = configurations.pluginLibs.collect{'lib/'+it.name}.join(' ')

        attributes 'Rundeck-Plugin-Classnames': pluginClassNames
        attributes 'Rundeck-Plugin-File-Version': archiveVersion
        attributes 'Rundeck-Plugin-Name': pluginName
        attributes 'Rundeck-Plugin-Description': pluginDescription
        attributes 'Rundeck-Plugin-Rundeck-Compatibility-Version': '3.x'
        attributes 'Rundeck-Plugin-Tags': 'java,WorkflowNodeStep'
        attributes 'Rundeck-Plugin-License': 'Apache 2.0'
        attributes 'Rundeck-Plugin-Source-Link': 'https://github.com/'
        attributes 'Rundeck-Plugin-Target-Host-Compatibility': 'all'
        attributes 'Rundeck-Plugin-Version': rundeckPluginVersion
        attributes 'Rundeck-Plugin-Archive': 'true'
        attributes 'Rundeck-Plugin-Libs': "${libList}"

    }
    dependsOn(copyToLib)
}

wrapper {
    gradleVersion = '6.2.2'
}
